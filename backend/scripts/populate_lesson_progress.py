#!/usr/bin/env python3
"""
Script pour peupler la table user_progress avec la progression de chaque le√ßon individuellement.
Ce script corrige le probl√®me o√π seules certaines le√ßons ont des entr√©es de progression.
"""

import sys
import os
from datetime import datetime
import random

# Ajouter le r√©pertoire parent au path pour importer les modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.database import get_db
from app.models import User, Course, Lesson, UserProgress, LessonCompletion
from sqlalchemy.orm import Session
from sqlalchemy import text

def populate_lesson_progress():
    """
    Peuple la table user_progress avec une entr√©e pour chaque le√ßon de chaque cours inscrit.
    Utilise les donn√©es existantes de lesson_completions pour d√©terminer les le√ßons termin√©es.
    """
    db = next(get_db())
    
    try:
        print("üöÄ D√©but de la population des progressions de le√ßons...")
        
        # R√©cup√©rer tous les √©tudiants inscrits √† des cours
        students_courses = db.execute(text("""
            SELECT DISTINCT cs.student_id, cs.course_id 
            FROM course_student cs
            JOIN users u ON cs.student_id = u.id 
            WHERE u.role = 'etudiant'
        """)).fetchall()
        
        print(f"üìö Trouv√© {len(students_courses)} inscriptions √©tudiant-cours")
        
        # R√©cup√©rer toutes les le√ßons compl√©t√©es existantes
        completed_lessons = {}
        completions = db.query(LessonCompletion).all()
        for completion in completions:
            key = (completion.user_id, completion.lesson_id)
            completed_lessons[key] = completion.completed_at
        
        print(f"‚úÖ Trouv√© {len(completed_lessons)} le√ßons compl√©t√©es existantes")
        
        # Supprimer les anciennes entr√©es user_progress pour √©viter les doublons
        print("üßπ Nettoyage des anciennes entr√©es user_progress...")
        db.query(UserProgress).delete()
        db.commit()
        
        total_created = 0
        
        # Pour chaque inscription √©tudiant-cours
        for student_id, course_id in students_courses:
            print(f"\nüë§ Traitement √©tudiant {student_id}, cours {course_id}")
            
            # R√©cup√©rer toutes les le√ßons du cours
            lessons = db.query(Lesson).filter(
                Lesson.course_id == course_id
            ).order_by(Lesson.module_id, Lesson.order_index).all()
            
            print(f"   üìñ {len(lessons)} le√ßons trouv√©es")
            
            for lesson in lessons:
                # V√©rifier si la le√ßon est compl√©t√©e
                completion_key = (student_id, lesson.id)
                is_completed = completion_key in completed_lessons
                
                # Calculer la progression
                if is_completed:
                    completion_percentage = 100.0
                    last_accessed = completed_lessons[completion_key]
                else:
                    # Progression al√©atoire r√©aliste pour les le√ßons non compl√©t√©es
                    # 70% des le√ßons non compl√©t√©es ont 0% de progression
                    # 30% ont une progression partielle (10-90%)
                    if random.random() < 0.7:
                        completion_percentage = 0.0
                    else:
                        completion_percentage = round(random.uniform(10, 90), 2)
                    last_accessed = datetime.now()
                
                # Cr√©er l'entr√©e user_progress
                progress_entry = UserProgress(
                    user_id=student_id,
                    course_id=course_id,
                    lesson_id=lesson.id,
                    is_completed=is_completed,
                    completion_percentage=completion_percentage,
                    last_accessed=last_accessed,
                    created_at=datetime.now(),
                    updated_at=datetime.now() if completion_percentage > 0 else None
                )
                
                db.add(progress_entry)
                total_created += 1
                
                if is_completed:
                    print(f"   ‚úÖ Le√ßon {lesson.id}: {lesson.title[:30]}... ‚Üí 100%")
                elif completion_percentage > 0:
                    print(f"   üîÑ Le√ßon {lesson.id}: {lesson.title[:30]}... ‚Üí {completion_percentage}%")
        
        # Sauvegarder toutes les modifications
        db.commit()
        print(f"\nüéâ Termin√© ! {total_created} entr√©es de progression cr√©√©es")
        
        # Afficher un r√©sum√©
        print("\nüìä R√©sum√© par utilisateur:")
        summary = db.execute(text("""
            SELECT 
                u.username,
                c.title as course_title,
                COUNT(*) as total_lessons,
                SUM(CASE WHEN up.is_completed = 1 THEN 1 ELSE 0 END) as completed_lessons,
                ROUND(AVG(up.completion_percentage), 2) as avg_progress
            FROM user_progress up
            JOIN users u ON up.user_id = u.id
            JOIN courses c ON up.course_id = c.id
            GROUP BY u.id, c.id
            ORDER BY u.username, c.title
        """)).fetchall()
        
        for row in summary:
            print(f"   üë§ {row.username} - {row.course_title}")
            print(f"      üìö {row.completed_lessons}/{row.total_lessons} le√ßons compl√©t√©es")
            print(f"      üìä Progression moyenne: {row.avg_progress}%")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        db.rollback()
        raise
    finally:
        db.close()

def verify_progress_data():
    """
    V√©rifie que les donn√©es de progression sont correctement cr√©√©es.
    """
    db = next(get_db())
    
    try:
        print("\nüîç V√©rification des donn√©es de progression...")
        
        # Compter les entr√©es par utilisateur
        result = db.execute(text("""
            SELECT 
                u.username,
                COUNT(up.id) as progress_entries,
                SUM(CASE WHEN up.is_completed = 1 THEN 1 ELSE 0 END) as completed,
                COUNT(DISTINCT up.course_id) as courses
            FROM users u
            LEFT JOIN user_progress up ON u.id = up.user_id
            WHERE u.role = 'etudiant'
            GROUP BY u.id, u.username
            ORDER BY u.username
        """)).fetchall()
        
        for row in result:
            print(f"   üë§ {row.username}: {row.progress_entries} le√ßons, {row.completed} compl√©t√©es, {row.courses} cours")
        
        # V√©rifier la coh√©rence avec lesson_completions
        inconsistencies = db.execute(text("""
            SELECT 
                lc.user_id,
                lc.lesson_id,
                up.completion_percentage
            FROM lesson_completions lc
            LEFT JOIN user_progress up ON lc.user_id = up.user_id AND lc.lesson_id = up.lesson_id
            WHERE up.completion_percentage != 100 OR up.is_completed != 1
        """)).fetchall()
        
        if inconsistencies:
            print(f"‚ö†Ô∏è  {len(inconsistencies)} incoh√©rences d√©tect√©es entre lesson_completions et user_progress")
        else:
            print("‚úÖ Coh√©rence parfaite entre lesson_completions et user_progress")
            
    finally:
        db.close()

if __name__ == "__main__":
    print("üéØ Script de population des progressions de le√ßons")
    print("=" * 50)
    
    # Demander confirmation
    response = input("Voulez-vous continuer ? (y/N): ").lower().strip()
    if response != 'y':
        print("‚ùå Op√©ration annul√©e")
        sys.exit(0)
    
    # Ex√©cuter la population
    populate_lesson_progress()
    
    # V√©rifier les r√©sultats
    verify_progress_data()
    
    print("\nüéâ Script termin√© avec succ√®s !")
