import { apiService } from './api.service';
import { API_CONFIG } from '@/config/api.config';

// Types pour les statistiques enseignant
export interface TeacherStats {
  students: number;
  courses: number;
  assignments: number;
  quizzes: number;
  discussions: number;
}

export interface TeacherCourse {
  id: string | number;
  title: string;
  students: number;
  completion: number;
  nextSession?: string;
  status: 'published' | 'draft';
  created_at: string;
  updated_at: string;
}

export interface StudentActivity {
  id: string | number;
  name: string;
  lastActivity: string;
  progress: number;
  avatar: string;
}

export interface QuizStat {
  id: string | number;
  title: string;
  completions: number;
  averageScore: number;
}

class TeacherService {
  // R√©cup√©rer les statistiques g√©n√©rales de l'enseignant
  async getTeacherStats(): Promise<TeacherStats> {
    try {
      console.log('üîç R√©cup√©ration des statistiques enseignant...');
      
      // Essayer diff√©rents endpoints pour r√©cup√©rer les statistiques
      const endpoints = [
        `${API_CONFIG.endpoints.teacherCourses}/stats`,
        '/api/v1/teacher/stats',
        '/api/v1/teacher/dashboard/stats',
        `${API_CONFIG.endpoints.teacherCourses}/dashboard-stats`
      ];

      let stats: TeacherStats = {
        students: 0,
        courses: 0,
        assignments: 0,
        quizzes: 0,
        discussions: 0
      };

      // Essayer de r√©cup√©rer les cours pour calculer les statistiques
      try {
        const coursesResponse = await apiService.get<any>(API_CONFIG.endpoints.teacherCourses);
        console.log('üìö R√©ponse courses:', coursesResponse);
        
        let courses = [];
        if (Array.isArray(coursesResponse)) {
          courses = coursesResponse;
        } else if (coursesResponse?.data && Array.isArray(coursesResponse.data)) {
          courses = coursesResponse.data;
        }

        stats.courses = courses.length;
        
        // Calculer le nombre total d'√©tudiants
        stats.students = courses.reduce((total: number, course: any) => {
          const studentCount = course.students?.length || course.enrolled_students?.length || course.student_count || 0;
          return total + studentCount;
        }, 0);

        console.log('üìä Statistiques calcul√©es:', stats);
      } catch (error) {
        console.error('‚ùå Erreur lors du calcul des statistiques:', error);
      }

      // Essayer de r√©cup√©rer les quiz
      try {
        const quizResponse = await apiService.get<any>('/api/v1/quizzes/teacher');
        if (Array.isArray(quizResponse)) {
          stats.quizzes = quizResponse.length;
        } else if (quizResponse?.data && Array.isArray(quizResponse.data)) {
          stats.quizzes = quizResponse.data.length;
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Impossible de r√©cup√©rer les quiz:', error);
      }

      return stats;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques enseignant:', error);
      // Retourner des statistiques par d√©faut en cas d'erreur
      return {
        students: 0,
        courses: 0,
        assignments: 0,
        quizzes: 0,
        discussions: 0
      };
    }
  }

  // R√©cup√©rer les cours de l'enseignant
  async getTeacherCourses(): Promise<TeacherCourse[]> {
    try {
      console.log('üìö R√©cup√©ration des cours enseignant...');
      const response = await apiService.get<any>(API_CONFIG.endpoints.teacherCourses);
      console.log('üìö R√©ponse courses:', response);
      
      let courses = [];
      if (Array.isArray(response)) {
        courses = response;
      } else if (response?.data && Array.isArray(response.data)) {
        courses = response.data;
      }

      return courses.map((course: any) => ({
        id: course.id,
        title: course.title || course.name || 'Cours sans titre',
        students: course.students?.length || course.enrolled_students?.length || course.student_count || 0,
        completion: course.completion_rate || Math.floor(Math.random() * 100), // Temporaire
        nextSession: course.next_session || '√Ä d√©finir',
        status: course.status || 'draft',
        created_at: course.created_at,
        updated_at: course.updated_at
      }));
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des cours:', error);
      return [];
    }
  }

  // R√©cup√©rer l'activit√© r√©cente des √©tudiants
  async getStudentActivities(): Promise<StudentActivity[]> {
    try {
      console.log('üë• R√©cup√©ration des activit√©s √©tudiants...');
      // Pour l'instant, retourner des donn√©es par d√©faut
      // TODO: Impl√©menter l'endpoint r√©el quand disponible
      return [];
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des activit√©s:', error);
      return [];
    }
  }

  // R√©cup√©rer les statistiques des quiz
  async getQuizStats(): Promise<QuizStat[]> {
    try {
      console.log('üìù R√©cup√©ration des statistiques quiz...');
      const response = await apiService.get<any>('/api/v1/quizzes/teacher');
      
      let quizzes = [];
      if (Array.isArray(response)) {
        quizzes = response;
      } else if (response?.data && Array.isArray(response.data)) {
        quizzes = response.data;
      }

      return quizzes.map((quiz: any) => ({
        id: quiz.id,
        title: quiz.title || `Quiz ${quiz.id}`,
        completions: quiz.completions || 0,
        averageScore: quiz.average_score || 0
      }));
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques quiz:', error);
      return [];
    }
  }
}

export const teacherService = new TeacherService();
